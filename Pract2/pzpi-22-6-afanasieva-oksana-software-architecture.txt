Міністерство освіти і науки України
Харківський національний  університет радіоелектроніки

Кафедра програмної інженерії


ЗВІТ
з практичної роботи №2
з дисципліни «Архітектура програмного забезпечення»
на тему: «Архітектура відомих програмних систем»


Виконала:	
ст. гр. ПЗПІ-22-6	
Афанасьєва О.М.	

Перевірив:
ст. викл. каф. ПІ
Сокорчук І.П.


Харків 2025
1 ІСТОРІЯ ЗМІН
Таблиця 1 – Історія змін 
№	Дата	Версія звіту	Опис змін та виправлень
1	25.05.2025	0.1	Створено розділ «Історія змін»
2	25.05.2025	0.1	Створено розділ «Завдання»
3	25.05.2025	0.1	Додано слайди презентації у додаток Б
5	25.05.2025	0.1	Створено розділ «Опис виконаної роботи»
6	25.05.2025	0.1	Створено розділ «Висновки»
7	26.05.2025	0.1	Додано посилання на відеозапис та хронологічний опис доповіді у додаток А

 
2 ЗАВДАННЯ
1.	Підготувати доповідь про архітектуру однієї з відомих складних програмних систем.
2.	Створити та оформити слайди презентації доповіді
3.	Створити та опублікувати на YouTube відеозапис доповіді
4.	Оформити та завантажити на dl.nure.ua звіт до виконаної роботи
5.	При потребі створити та налаштувати у GitHub обліковий запис для облікового запису студента в домені @nure.ua
6.	Створити для виконання завдань з дисципліни GitHub репозиторій iз вказаним на https://dl.nure.ua іменем та з головною гілкою main
7.	Створити у корені створеного репозиторію файл README.md з вказаним змістом та вказані директорії для окремих завдань
8.	Експортувати звіт у файл у простому текстововому форматі та завантажити цей файл у директорію Pract2 у репозиторії GitHub
9.	Завантажити у вказану далі піддиректорію увесь програмний код, який розглядається у доповіді ПЗ2.
 
3 ОПИС ВИКОНАНОЇ РОБОТИ
Steam – це провідна платформа цифрової дистрибуції комп’ютерних ігор, програмного забезпечення та супутніх послуг, створена компанією Valve Corporation. Вона поєднує в собі інтернет-магазин, систему управління цифровими ліцензіями, сервіс завантаження, спільноту користувачів і комплекс інструментів для розробників. Завдяки своїй багатофункціональності, надійності й масштабованості, Steam став ключовим гравцем у глобальній ігровій інфраструктурі.
Steam був запущений у 2002 році. Він пропонував лише ігри Valve і був обов'язковим для встановлення Half-Life 2, але згодом став видавцем ігор і для сторонніх розробників. Початкова архітектура була відносно простою і базувалася на традиційній клієнт-серверній моделі з централізованими серверами оновлень.
Перший значний архітектурний рефакторинг відбувся у 2004-2005 роках, коли Valve зрозуміла потенціал платформи як магазину цифрових ігор. Система була перепроектована для підтримки комерційних транзакцій, управління ліцензіями та розповсюдження повних ігор, а не лише оновлень.
Революційні зміни в архітектурі відбулися у 2010-2012 роках з впровадженням Steam Workshop, Steam Community та системи досягнень. Це потребувало переходу до більш модульної архітектури з розділенням відповідальності між різними сервісами. Саме в цей період була закладена основа сучасної мікросервісної архітектури Steam.
Наступна хвиля інновацій прийшла з розвитком Steam Cloud у 2013-2015 роках, що потребувало створення розподіленої системи зберігання файлів користувачів, синхронізації даних між різними пристроями та забезпечення високої доступності цих сервісів.
У 2022 році екосистема Steam розширилась завдяки запуску Steam Deck – портативного ігрового пристрою на базі SteamOS. Це дозволило гравцям отримати повноцінний доступ до бібліотеки Steam у мобільному форматі, що зміцнило позицію платформи як кросплатформного рішення.
Останні роки характеризуються активним розвитком машинного навчання та штучного інтелекту в рамках платформи, що призвело до створення складних систем рекомендацій, виявлення шахрайства та персоналізації контенту.
Steam функціонує як комплексна екосистема цифрових розваг, що об'єднує декілька ключових функціональних областей. Основне призначення платформи полягає в наданні централізованого доступу до цифрового контенту, забезпеченні зручного користувацького досвіду та створенні активної спільноти гравців.
Система цифрового розповсюдження забезпечує придбання, завантаження та встановлення ігор з автоматичним управлінням оновленнями. Ця підсистема включає складні алгоритми компресії та дедуплікації, що дозволяють мінімізувати розмір завантажень та оптимізувати використання пропускної здатності.
Платформа соціальної взаємодії включає систему друзів, груп, форумів та чатів, створюючи активну спільноту мільйонів користувачів. Ця підсистема обробляє мільйони повідомлень щодня, забезпечуючи модерацію контенту та захист від спаму і шкідливого контенту.
Економічна платформа Steam Market дозволяє користувачам торгувати віртуальними предметами, створюючи унікальну цифрову економіку з оборотом у мільярди доларів. Ця система потребує складних алгоритмів визначення цін, запобігання шахрайству та забезпечення безпеки транзакцій.
Система аналітики та метрик збирає величезні обсяги даних про поведінку користувачів, продуктивність ігор та тенденції ринку, надаючи розробникам цінну інформацію для оптимізації їхніх продуктів.
Архітектура Steam базується на гетерогенному стеку технологій, що відображає еволюцію платформи протягом двох десятиліть. Основний серверний код написаний переважно на C++ для критично важливих компонентів, що потребують високої продуктивності та низької затримки.
Клієнтська частина Steam також реалізована на C++ з використанням власного UI-фреймворку, що забезпечує кросплатформну сумісність та високу продуктивність. Веб-компоненти платформи, включаючи Steam Store та Community, використовують PHP для серверної логіки та JavaScript для клієнтської інтерактивності.
База даних Steam побудована на MySQL кластерах з активним використанням Redis для кешування та швидкого доступу до даних. Для зберігання великих файлів використовується власна розподілена файлова система, оптимізована для специфічних потреб платформи.
Архітектура зберігання даних Steam відображає складність та різноманітність інформації, якою керує платформа. Система організована навколо багаторівневої ієрархії сховищ, кожне з яких оптимізовано для специфічних типів даних та паттернів доступу.
Реляційні бази даних на основі MySQL кластерів зберігають критично важливу структуровану інформацію: дані користувачів, інформацію про продукти, історію транзакцій, налаштування аккаунтів. Ці дані реплікуються між географічно розподіленими дата-центрами для забезпечення високої доступності та швидкості доступу.
NoSQL системи на базі Redis використовуються для високошвидкісного кешування та зберігання сесійних даних. Кожен користувацький сеанс, статус онлайн, активність в іграх та інша часто запитувана інформація зберігається в Redis кластерах з автоматичним видаленням застарілих даних.
Файли ігор і оновлень зберігаються у Steam Content Delivery Network (CDN), яка включає тисячі вузлів по всьому світу.
Steam Cloud представляє окрему підсистему зберігання, що синхронізує користувацькі файли збережень, налаштування та досягнення між різними пристроями. Ця система забезпечує конфліктне вирішення при одночасному доступі з різних пристроїв та версіонність файлів.
Steam демонструє еволюцію від монолітної архітектури до складної гібридної системи, що поєднує елементи мікросервісів, монолітних ядер та розподілених систем. Ця архітектура відображає прагматичний підхід до проектування, де вибір архітектурного стилю диктується специфічними потребами кожного компонента.
Центральне ядро системи залишається відносно монолітним, що забезпечує консистентність даних та спрощує управління складними бізнес-процесами. Це ядро відповідає за автентифікацію користувачів, управління ліцензіями, обробку платежів та інші критично важливі операції, де атомарність та консистентність мають першочергове значення.
Навколо цього ядра розташована екосистема мікросервісів, кожен з яких відповідає за специфічну функціональність: рекомендаційна система, система досягнень, Steam Workshop, Community Features тощо. Цей підхід дозволяє незалежно розвивати та масштабувати різні частини системи без впливу на критично важливі компоненти.
Content Delivery Network (CDN) Steam являє собою окрему розподілену систему, що керує доставкою контенту користувачам. Ця система використовує власні алгоритми маршрутизації та кешування, оптимізовані для специфіки доставки ігрового контенту.
Архітектура також включає складну систему черг повідомлень для асинхронної обробки подій, що забезпечує масштабованість та відмовостійкість. Ця система базується на власних протоколах та інструментах, розроблених спеціально для потреб Steam.
Стратегія масштабування Steam базується на комбінації горизонтального та вертикального масштабування з акцентом на географічному розподілі навантаження та проактивному управлінні ресурсами.
Горизонтальне масштабування реалізовано через систему мікросервісів, де кожен сервіс може незалежно масштабуватися залежно від навантаження. Автоматичні системи моніторингу відстежують ключові метрики продуктивності та ініціюють масштабування при досягненні порогових значень.
Content Delivery Network Steam налічує сотні вузлів по всьому світу, автоматично направляючи користувачів до найближчих серверів. Ця система використовує інтелектуальну маршрутизацію, що враховує не лише географічну відстань, але й поточне навантаження серверів, якість мережевих з'єднань та історичну продуктивність.
Система забезпечення стійкості включає багаторівневе резервування даних, автоматичні системи відновлення після збоїв та механізми поступового зменшення функціональності при збоях без повного відключення. При відмові критично важливих компонентів система може продовжувати функціонувати в обмеженому режимі, забезпечуючи доступ до найважливіших функцій.
Регулярні навантажувальні тести та навмисне створення збоїв для перевірки стійкості системи допомагають виявляти потенційні точки відмови до того, як вони вплинуть на користувачів. Система включає автоматичні механізми виявлення аномалій та попередження про потенційні проблеми.
Disaster recovery процедури забезпечують швидке відновлення роботи навіть при катастрофічних відмовах цілих дата-центрів. Критично важливі дані реплікуються в реальному часі між географічно віддаленими локаціями.
Взаємодія між компонентами Steam організована через багаторівневу систему комунікації, що забезпечує як синхронні, так і асинхронні взаємодії залежно від специфічних потреб кожного сценарію використання.
На найнижчому рівні система використовує TCP/UDP протоколи для прямої комунікації між серверами та клієнтами. Власний протокол Steam забезпечує ефективне стиснення даних, автентифікацію та шифрування трафіку. Цей протокол оптимізований для мінімізації затримок та забезпечення стабільності з'єднання навіть при поганій якості мережі.
HTTP/HTTPS API використовується для взаємодії веб-сервісів та інтеграції з зовнішніми системами. Steam API надає розробникам доступ до функціональності платформи через RESTful endpoints, забезпечуючи стандартизовані способи взаємодії з системою.
Система повідомлень реального часу забезпечує миттєву доставку сповіщень, оновлень статусу друзів, чат-повідомлень та інших інтерактивних елементів. Ця система базується на WebSocket з'єднаннях.
Міжсервісна комунікація організована через внутрішні API та систему черг повідомлень. Критично важливі операції використовують синхронні виклики з гарантованою доставкою, тоді як фонові процеси та аналітика використовують асинхронні черги для забезпечення масштабованості.
Система також включає складні механізми балансування навантаження, що забезпечують автоматичне перенаправлення трафіку при відмовах окремих компонентів та оптимальний розподіл навантаження між серверами.
Економічна архітектура Steam представляє складну систему, що забезпечує множину моделей монетизації та підтримує активну цифрову економіку з оборотом у мільярди доларів щороку.
Система обробки платежів інтегрована з понад 100 платіжними системами по всьому світу, підтримуючи різні валюти, методи оплати та регіональні особливості. Архітектура забезпечує PCI DSS відповідність та використовує багаторівневе шифрування для захисту фінансової інформації.
Steam Market являє собою унікальну платформу для торгівлі віртуальними предметами, що створює складну економічну екосистему. Система відстежує мільйони транзакцій щодня, автоматично визначає справедливі ціни та запобігає маніпуляціям ринку.
Система комісій та розподілу доходів автоматично розраховує та переказує кошти розробникам, видавцям та іншим учасникам екосистеми. Ця система працює з множиною валют та податкових юрисдикцій, забезпечуючи відповідність місцевому законодавству.
Антифрод система використовує машинне навчання для виявлення підозрілих транзакцій, крадених платіжних карток та інших видів шахрайства. Система аналізує патерни поведінки користувачів, географічні аномалії та інші сигнали для запобігання шахрайським операціям.
Система підписок та DLC керує складними моделями ціноутворення, включаючи знижки, комплекти ігор, сезонні пропозиції та регіональні ціни. Автоматичні алгоритми оптимізують ціни для максимізації доходів при збереженні доступності для користувачів.
Архітектура безпеки Steam включає багаторівневу систему захисту, що покриває всі аспекти платформи від мережевої безпеки до захисту персональних даних користувачів.
Мережева безпека базується на розподіленій системі firewalls, DDoS захисту та виявлення підозрілих дій. Система автоматично виявляє та блокує зловмисний трафік, використовуючи машинне навчання для ідентифікації нових типів атак.
Автентифікація та авторизація реалізована через багатофакторну систему з підтримкою різних методів верифікації: паролі, Steam Guard через мобільний додаток, SMS, email підтвердження. Система також підтримує біометричну автентифікацію на сумісних пристроях.
Шифрування даних забезпечується на всіх рівнях: в транзиті через TLS/SSL протоколи, в спокої через AES-256 шифрування баз даних та файлових систем. Ключі шифрування ротуються автоматично та зберігаються в спеціалізованих hardware security modules.
Система виявлення та запобігання втручанням моніторить активність користувачів для виявлення компрометованих аккаунтів, читерства в іграх та інших порушень безпеки. Машинне навчання допомагає виявляти аномальну поведінку та автоматично застосовувати захисні заходи.
Користувачі мають повний контроль над своїми даними з можливістю експорту, видалення та корекції.
 
4 ВИСНОВКИ
Архітектура Steam являє собою унікальний приклад еволюції складної розподіленої системи, що успішно адаптувалася до зростаючих вимог протягом двох десятиліть. Ключовими факторами успіху стали прагматичний підхід до вибору архітектурних рішень, постійна оптимізація під реальні потреби користувачів та здатність до поступової еволюції без кардинальних перебудов.
Гібридна архітектура Steam, що поєднує монолітні ядра з мікросервісними компонентами, демонструє, що не існує універсальних архітектурних рішень, а успіх залежить від правильного балансу між складністю, продуктивністю та підтримуваністю.
Система доводить важливість інвестицій у власну технологічну інфраструктуру для критично важливих компонентів при одночасному використанні перевіреної технологій для стандартних задач. Розробка власного CDN, протоколів та файлових систем забезпечила Steam унікальні конкурентні переваги.
Успіх платформи також підкреслює значення підходу прийняття рішень на основі даних, а не інтуїції, до архітектурних рішень та важливість систем моніторингу та аналітики для підтримки великомасштабних систем.
Досвід Steam надає цінні уроки для проектування майбутніх платформ цифрового розповсюдження та демонструє, що правильно спроектована архітектура може забезпечити довготривалий успіх навіть в умовах швидко мінливого технологічного ландшафту.
 
ДОДАТОК А
Відеозапис та хронологічний опис

Відеозапис доповіді на YouTube: 
Хронологічний опис відеозапису:

ДОДАТОК Б
Слайди презентації

Рисунок Б.1 – Титульний слайд

Рисунок Б.2 – Вступ

Рисунок Б.3 – Історія розвитку
 
Рисунок Б.4 – Призначення системи та функціональні компоненти

Рисунок Б.5 – Технологічна база та мови програмування
 
Рисунок Б.6 – Робота з даними та системи зберігання
 
Рисунок Б.7 – Архітектурна діаграма
 
Рисунок Б.8 – Архітектурний стиль та основні принципи
 
Рисунок Б.9 – Масштабування та забезпечення стійкості
 
Рисунок Б.10 – Монетизація та економічна система
 
Рисунок Б.11 – Безпека та захист даних
 
Рисунок Б.12 – Висновки
 
Рисунок Б.13 – Використані джерела
